
exe/efmwg840.out:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000644  00000000  00000000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00000644  00000644  00008644  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000084  20000000  0000064c  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000210  20000100  00000800  00010100  2**8
                  ALLOC
  4 .heap         00000c00  20000310  20000310  00010088  2**3
                  CONTENTS
  5 .stack_dummy  00000400  20000f10  20000f10  00010c88  2**3
                  CONTENTS
  6 .ARM.attributes 0000002a  00000000  00000000  00011088  2**0
                  CONTENTS, READONLY
  7 .comment      00000080  00000000  00000000  000110b2  2**0
                  CONTENTS, READONLY
  8 .debug_info   00002f3a  00000000  00000000  00011132  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00000c5f  00000000  00000000  0001406c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000007a7  00000000  00000000  00014ccb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000001a8  00000000  00000000  00015472  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000170  00000000  00000000  0001561a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0001b8b3  00000000  00000000  0001578a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00002c2c  00000000  00000000  0003103d  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000a3cdd  00000000  00000000  00033c69  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00000344  00000000  00000000  000d7948  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__Vectors>:
   0:	00 80 00 20 59 05 00 00 55 05 00 00 55 05 00 00     ... Y...U...U...
  10:	55 05 00 00 55 05 00 00 55 05 00 00 55 05 00 00     U...U...U...U...
  20:	55 05 00 00 55 05 00 00 55 05 00 00 55 05 00 00     U...U...U...U...
  30:	55 05 00 00 55 05 00 00 55 05 00 00 55 05 00 00     U...U...U...U...
  40:	55 05 00 00 55 05 00 00 55 05 00 00 55 05 00 00     U...U...U...U...
  50:	55 05 00 00 55 05 00 00 55 05 00 00 55 05 00 00     U...U...U...U...
  60:	55 05 00 00 55 05 00 00 55 05 00 00 55 05 00 00     U...U...U...U...
  70:	55 05 00 00 55 05 00 00 55 05 00 00 55 05 00 00     U...U...U...U...
  80:	55 05 00 00 55 05 00 00 55 05 00 00 55 05 00 00     U...U...U...U...
  90:	55 05 00 00 55 05 00 00 55 05 00 00 55 05 00 00     U...U...U...U...
  a0:	55 05 00 00 55 05 00 00 55 05 00 00 55 05 00 00     U...U...U...U...
  b0:	55 05 00 00 55 05 00 00 55 05 00 00 55 05 00 00     U...U...U...U...
  c0:	55 05 00 00 55 05 00 00 55 05 00 00 55 05 00 00     U...U...U...U...
  d0:	55 05 00 00 55 05 00 00 55 05 00 00 55 05 00 00     U...U...U...U...

000000e0 <__do_global_dtors_aux>:
  e0:	b510      	push	{r4, lr}
  e2:	4c05      	ldr	r4, [pc, #20]	; (f8 <__do_global_dtors_aux+0x18>)
  e4:	7823      	ldrb	r3, [r4, #0]
  e6:	b933      	cbnz	r3, f6 <__do_global_dtors_aux+0x16>
  e8:	4b04      	ldr	r3, [pc, #16]	; (fc <__do_global_dtors_aux+0x1c>)
  ea:	b113      	cbz	r3, f2 <__do_global_dtors_aux+0x12>
  ec:	4804      	ldr	r0, [pc, #16]	; (100 <__do_global_dtors_aux+0x20>)
  ee:	f3af 8000 	nop.w
  f2:	2301      	movs	r3, #1
  f4:	7023      	strb	r3, [r4, #0]
  f6:	bd10      	pop	{r4, pc}
  f8:	20000100 	.word	0x20000100
  fc:	00000000 	.word	0x00000000
 100:	00000640 	.word	0x00000640

00000104 <frame_dummy>:
 104:	b508      	push	{r3, lr}
 106:	4b06      	ldr	r3, [pc, #24]	; (120 <frame_dummy+0x1c>)
 108:	b11b      	cbz	r3, 112 <frame_dummy+0xe>
 10a:	4806      	ldr	r0, [pc, #24]	; (124 <frame_dummy+0x20>)
 10c:	4906      	ldr	r1, [pc, #24]	; (128 <frame_dummy+0x24>)
 10e:	f3af 8000 	nop.w
 112:	4806      	ldr	r0, [pc, #24]	; (12c <frame_dummy+0x28>)
 114:	6803      	ldr	r3, [r0, #0]
 116:	b113      	cbz	r3, 11e <frame_dummy+0x1a>
 118:	4b05      	ldr	r3, [pc, #20]	; (130 <frame_dummy+0x2c>)
 11a:	b103      	cbz	r3, 11e <frame_dummy+0x1a>
 11c:	4798      	blx	r3
 11e:	bd08      	pop	{r3, pc}
 120:	00000000 	.word	0x00000000
 124:	00000640 	.word	0x00000640
 128:	20000104 	.word	0x20000104
 12c:	20000080 	.word	0x20000080
 130:	00000000 	.word	0x00000000

00000134 <_mainCRTStartup>:
 134:	4b15      	ldr	r3, [pc, #84]	; (18c <_mainCRTStartup+0x58>)
 136:	2b00      	cmp	r3, #0
 138:	bf08      	it	eq
 13a:	4b13      	ldreq	r3, [pc, #76]	; (188 <_mainCRTStartup+0x54>)
 13c:	469d      	mov	sp, r3
 13e:	f5a3 3a80 	sub.w	sl, r3, #65536	; 0x10000
 142:	2100      	movs	r1, #0
 144:	468b      	mov	fp, r1
 146:	460f      	mov	r7, r1
 148:	4813      	ldr	r0, [pc, #76]	; (198 <_mainCRTStartup+0x64>)
 14a:	4a14      	ldr	r2, [pc, #80]	; (19c <_mainCRTStartup+0x68>)
 14c:	1a12      	subs	r2, r2, r0
 14e:	f000 fa53 	bl	5f8 <memset>
 152:	4b0f      	ldr	r3, [pc, #60]	; (190 <_mainCRTStartup+0x5c>)
 154:	2b00      	cmp	r3, #0
 156:	d000      	beq.n	15a <_mainCRTStartup+0x26>
 158:	4798      	blx	r3
 15a:	4b0e      	ldr	r3, [pc, #56]	; (194 <_mainCRTStartup+0x60>)
 15c:	2b00      	cmp	r3, #0
 15e:	d000      	beq.n	162 <_mainCRTStartup+0x2e>
 160:	4798      	blx	r3
 162:	2000      	movs	r0, #0
 164:	2100      	movs	r1, #0
 166:	0004      	movs	r4, r0
 168:	000d      	movs	r5, r1
 16a:	480d      	ldr	r0, [pc, #52]	; (1a0 <_mainCRTStartup+0x6c>)
 16c:	2800      	cmp	r0, #0
 16e:	d002      	beq.n	176 <_mainCRTStartup+0x42>
 170:	480c      	ldr	r0, [pc, #48]	; (1a4 <_mainCRTStartup+0x70>)
 172:	f3af 8000 	nop.w
 176:	f000 fa19 	bl	5ac <__libc_init_array>
 17a:	0020      	movs	r0, r4
 17c:	0029      	movs	r1, r5
 17e:	f000 f979 	bl	474 <main>
 182:	f000 f9ff 	bl	584 <exit>
 186:	bf00      	nop
 188:	00080000 	.word	0x00080000
 18c:	20008000 	.word	0x20008000
	...
 198:	20000100 	.word	0x20000100
 19c:	20000310 	.word	0x20000310
	...

000001a8 <SystemInit>:
 *   This function is invoked during system init, before the main() routine
 *   and any data has been initialized. For this reason, it cannot do any
 *   initialization of variables etc.
 *****************************************************************************/
void SystemInit(void)
{
 1a8:	4770      	bx	lr
	...

000001ac <XMODEM_download>:
 *
 * @param endAddress
 *   The last address. This is only used for clearing the flash
 *****************************************************************************/
 void XMODEM_download(uint32_t baseAddress, uint32_t endAddress)
{
 1ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 1ae:	4607      	mov	r7, r0
 1b0:	460d      	mov	r5, r1
  uint32_t      i;
  uint32_t      addr;
  uint32_t      byte;
  uint32_t      sequenceNumber = 1;

  for (addr = baseAddress; addr < endAddress; addr += FLASH_PAGE_SIZE)
 1b2:	4604      	mov	r4, r0
 1b4:	42ac      	cmp	r4, r5
 1b6:	d207      	bcs.n	1c8 <XMODEM_download+0x1c>
  {
    FLASH_eraseOneBlock(addr);
 1b8:	4620      	mov	r0, r4
 1ba:	f000 f8df 	bl	37c <FLASH_eraseOneBlock>
  uint32_t      i;
  uint32_t      addr;
  uint32_t      byte;
  uint32_t      sequenceNumber = 1;

  for (addr = baseAddress; addr < endAddress; addr += FLASH_PAGE_SIZE)
 1be:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 1c2:	e7f7      	b.n	1b4 <XMODEM_download+0x8>
   * response, we resend the start transmission packet.
   * Note: This is a fairly long delay between retransmissions(~6 s). */
  while (1)
  {
    USART_txByte(XMODEM_NCG);
    for (i = 0; i < 10000000; i++)
 1c4:	3b01      	subs	r3, #1
 1c6:	d103      	bne.n	1d0 <XMODEM_download+0x24>
  /* Send one start transmission packet. Wait for a response. If there is no
   * response, we resend the start transmission packet.
   * Note: This is a fairly long delay between retransmissions(~6 s). */
  while (1)
  {
    USART_txByte(XMODEM_NCG);
 1c8:	2043      	movs	r0, #67	; 0x43
 1ca:	f000 f86b 	bl	2a4 <USART_txByte>
 1ce:	4b29      	ldr	r3, [pc, #164]	; (274 <XMODEM_download+0xc8>)
    for (i = 0; i < 10000000; i++)
    {
#if defined( BOOTLOADER_LEUART_CLOCKEN )
      if (BOOTLOADER_USART->STATUS & LEUART_STATUS_RXDATAV)
#else
      if (BOOTLOADER_USART->STATUS & USART_STATUS_RXDATAV)
 1d0:	4a29      	ldr	r2, [pc, #164]	; (278 <XMODEM_download+0xcc>)
 1d2:	6912      	ldr	r2, [r2, #16]
 1d4:	0612      	lsls	r2, r2, #24
 1d6:	d5f5      	bpl.n	1c4 <XMODEM_download+0x18>
 1d8:	2501      	movs	r5, #1
 1da:	e010      	b.n	1fe <XMODEM_download+0x52>
      break;
    }

    /* If the header is not a start of header (SOH), then cancel *
     * the transfer. */
    if (pkt->header != XMODEM_SOH)
 1dc:	2801      	cmp	r0, #1
 1de:	d148      	bne.n	272 <XMODEM_download+0xc6>
 1e0:	2602      	movs	r6, #2

    /* Fill the remaining bytes packet */
    /* Byte 0 is padding, byte 1 is header */
    for (byte = 2; byte < sizeof(XMODEM_packet); byte++)
    {
      *(((uint8_t *) pkt) + byte) = USART_rxByte();
 1e2:	f000 f84f 	bl	284 <USART_rxByte>
 1e6:	55a0      	strb	r0, [r4, r6]
      //return -1;
    }

    /* Fill the remaining bytes packet */
    /* Byte 0 is padding, byte 1 is header */
    for (byte = 2; byte < sizeof(XMODEM_packet); byte++)
 1e8:	3601      	adds	r6, #1
 1ea:	2e86      	cmp	r6, #134	; 0x86
 1ec:	d1f9      	bne.n	1e2 <XMODEM_download+0x36>
{
  uint16_t packetCRC;
  uint16_t calculatedCRC;

  /* Check the packet number integrity */
  if (pkt->packetNumber + pkt->packetNumberC != 255)
 1ee:	78a2      	ldrb	r2, [r4, #2]
 1f0:	78e3      	ldrb	r3, [r4, #3]
 1f2:	4413      	add	r3, r2
 1f4:	2bff      	cmp	r3, #255	; 0xff
 1f6:	d011      	beq.n	21c <XMODEM_download+0x70>
    }

    if (XMODEM_verifyPacketChecksum(pkt, sequenceNumber) != 0)
    {
      /* On a malformed packet, we send a NAK, and start over */
      USART_txByte(XMODEM_NAK);
 1f8:	2015      	movs	r0, #21



    sequenceNumber++;
    /* Send ACK */
    USART_txByte(XMODEM_ACK);
 1fa:	f000 f853 	bl	2a4 <USART_txByte>
  }
xmodem_transfer:
  while (1)
  {
    /* Swap buffer for packet buffer */
    pkt = (XMODEM_packet *) rawPacket[sequenceNumber & 1];
 1fe:	4b1f      	ldr	r3, [pc, #124]	; (27c <XMODEM_download+0xd0>)
 200:	2288      	movs	r2, #136	; 0x88
 202:	f005 0401 	and.w	r4, r5, #1
 206:	fb02 3404 	mla	r4, r2, r4, r3

    /* Fetch the first byte of the packet explicitly, as it defines the
     * rest of the packet */
    pkt->header = USART_rxByte();
 20a:	f000 f83b 	bl	284 <USART_rxByte>

    /* Check for end of transfer */
    if (pkt->header == XMODEM_EOT)
 20e:	2804      	cmp	r0, #4
    /* Swap buffer for packet buffer */
    pkt = (XMODEM_packet *) rawPacket[sequenceNumber & 1];

    /* Fetch the first byte of the packet explicitly, as it defines the
     * rest of the packet */
    pkt->header = USART_rxByte();
 210:	7060      	strb	r0, [r4, #1]

    /* Check for end of transfer */
    if (pkt->header == XMODEM_EOT)
 212:	d1e3      	bne.n	1dc <XMODEM_download+0x30>
    {
      /* Acknowledget End of transfer */
      USART_txByte(XMODEM_ACK);
 214:	2006      	movs	r0, #6
 216:	f000 f845 	bl	2a4 <USART_txByte>
    sequenceNumber++;
    /* Send ACK */
    USART_txByte(XMODEM_ACK);
  }
  /* Wait for the last DMA transfer to finish. */
  while (DMA->CHENS & DMA_CHENS_CH0ENS) ;
 21a:	e019      	b.n	250 <XMODEM_download+0xa4>
  {
    return -1;
  }

  /* Check that the packet number matches the excpected number */
  if (pkt->packetNumber != (sequenceNumber % 256))
 21c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 220:	402b      	ands	r3, r5
 222:	2b00      	cmp	r3, #0
 224:	da03      	bge.n	22e <XMODEM_download+0x82>
 226:	3b01      	subs	r3, #1
 228:	f063 03ff 	orn	r3, r3, #255	; 0xff
 22c:	3301      	adds	r3, #1
 22e:	429a      	cmp	r2, r3
 230:	d1e2      	bne.n	1f8 <XMODEM_download+0x4c>
  {
    return -1;
  }

  calculatedCRC = CRC_calc((uint8_t *) pkt->data, (uint8_t *) &(pkt->crcHigh));
 232:	1d26      	adds	r6, r4, #4
 234:	4630      	mov	r0, r6
 236:	f104 0184 	add.w	r1, r4, #132	; 0x84
 23a:	f000 f8b9 	bl	3b0 <CRC_calc>
  packetCRC     = pkt->crcHigh << 8 | pkt->crcLow;
 23e:	f894 2084 	ldrb.w	r2, [r4, #132]	; 0x84
 242:	f894 3085 	ldrb.w	r3, [r4, #133]	; 0x85

  /* Check the CRC value */
  if (calculatedCRC != packetCRC)
 246:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 24a:	4298      	cmp	r0, r3
 24c:	d1d4      	bne.n	1f8 <XMODEM_download+0x4c>
 24e:	e004      	b.n	25a <XMODEM_download+0xae>
    sequenceNumber++;
    /* Send ACK */
    USART_txByte(XMODEM_ACK);
  }
  /* Wait for the last DMA transfer to finish. */
  while (DMA->CHENS & DMA_CHENS_CH0ENS) ;
 250:	4b0b      	ldr	r3, [pc, #44]	; (280 <XMODEM_download+0xd4>)
 252:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 254:	07db      	lsls	r3, r3, #31
 256:	d4fb      	bmi.n	250 <XMODEM_download+0xa4>
 258:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      USART_txByte(XMODEM_NAK);
      continue;
    }

    /* Write data to flash */
    FLASH_writeBlock((void *) baseAddress,
 25a:	f105 7100 	add.w	r1, r5, #33554432	; 0x2000000
 25e:	3901      	subs	r1, #1
 260:	4638      	mov	r0, r7
 262:	01c9      	lsls	r1, r1, #7
 264:	2280      	movs	r2, #128	; 0x80
 266:	4633      	mov	r3, r6
 268:	f000 f85c 	bl	324 <FLASH_writeBlock>
                     XMODEM_DATA_SIZE,
                     (uint8_t const *) pkt->data);



    sequenceNumber++;
 26c:	3501      	adds	r5, #1
    /* Send ACK */
    USART_txByte(XMODEM_ACK);
 26e:	2006      	movs	r0, #6
 270:	e7c3      	b.n	1fa <XMODEM_download+0x4e>
 272:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 274:	00989680 	.word	0x00989680
 278:	4000c000 	.word	0x4000c000
 27c:	2000011c 	.word	0x2000011c
 280:	400c2000 	.word	0x400c2000

00000284 <USART_rxByte>:
/**************************************************************************//**
 * @brief Transmit single byte to BOOTLOADER_USART
 *****************************************************************************/
 uint8_t USART_rxByte(void)
{
  uint32_t timer = 1000000;
 284:	4805      	ldr	r0, [pc, #20]	; (29c <USART_rxByte+0x18>)
  while (!(BOOTLOADER_USART->STATUS & LEUART_STATUS_RXDATAV) && --timer ) ;
 286:	4b06      	ldr	r3, [pc, #24]	; (2a0 <USART_rxByte+0x1c>)
 288:	691a      	ldr	r2, [r3, #16]
 28a:	0692      	lsls	r2, r2, #26
 28c:	d402      	bmi.n	294 <USART_rxByte+0x10>
 28e:	3801      	subs	r0, #1
 290:	d1f9      	bne.n	286 <USART_rxByte+0x2>
 292:	4770      	bx	lr
  if (timer > 0)
 294:	b108      	cbz	r0, 29a <USART_rxByte+0x16>
  {
    return((uint8_t)(BOOTLOADER_USART->RXDATA & 0xFF));
 296:	69d8      	ldr	r0, [r3, #28]
 298:	b2c0      	uxtb	r0, r0
  }
  else
  {
    return 0;
  }
}
 29a:	4770      	bx	lr
 29c:	000f4240 	.word	0x000f4240
 2a0:	4000c000 	.word	0x4000c000

000002a4 <USART_txByte>:
 * @brief Transmit single byte to BOOTLOADER_USART
 *****************************************************************************/
 void USART_txByte(uint8_t data)
{
  /* Check that transmit buffer is empty */
  while (!(BOOTLOADER_USART->STATUS & LEUART_STATUS_TXBL)) ;
 2a4:	4b02      	ldr	r3, [pc, #8]	; (2b0 <USART_txByte+0xc>)
 2a6:	691a      	ldr	r2, [r3, #16]
 2a8:	06d2      	lsls	r2, r2, #27
 2aa:	d5fb      	bpl.n	2a4 <USART_txByte>

  BOOTLOADER_USART->TXDATA = (uint32_t) data;
 2ac:	6358      	str	r0, [r3, #52]	; 0x34
 2ae:	4770      	bx	lr
 2b0:	4000c000 	.word	0x4000c000

000002b4 <USART_printHex>:
 *
 * @param integer
 *   The integer to be printed.
 ******************************************************************************/
 void USART_printHex(uint32_t integer)
{
 2b4:	b538      	push	{r3, r4, r5, lr}
 2b6:	4605      	mov	r5, r0
 2b8:	2408      	movs	r4, #8
  uint8_t c;
  int i, digit;

  for (i = 0; i <= 7; i++)
  {
    digit = integer >> 28;
 2ba:	0f2b      	lsrs	r3, r5, #28
    c = digit + 0x30;
    if (digit >= 10)
 2bc:	2b09      	cmp	r3, #9
  int i, digit;

  for (i = 0; i <= 7; i++)
  {
    digit = integer >> 28;
    c = digit + 0x30;
 2be:	b2d8      	uxtb	r0, r3
 2c0:	bfd4      	ite	le
 2c2:	3030      	addle	r0, #48	; 0x30
    if (digit >= 10)
    {
      c += 7;
 2c4:	3037      	addgt	r0, #55	; 0x37
    }
    USART_txByte(c);
 2c6:	f7ff ffed 	bl	2a4 <USART_txByte>
 void USART_printHex(uint32_t integer)
{
  uint8_t c;
  int i, digit;

  for (i = 0; i <= 7; i++)
 2ca:	3c01      	subs	r4, #1
    if (digit >= 10)
    {
      c += 7;
    }
    USART_txByte(c);
    integer <<= 4;
 2cc:	ea4f 1505 	mov.w	r5, r5, lsl #4
 void USART_printHex(uint32_t integer)
{
  uint8_t c;
  int i, digit;

  for (i = 0; i <= 7; i++)
 2d0:	d1f3      	bne.n	2ba <USART_printHex+0x6>
      c += 7;
    }
    USART_txByte(c);
    integer <<= 4;
  }
}
 2d2:	bd38      	pop	{r3, r4, r5, pc}

000002d4 <USART_printString>:

/**************************************************************************//**
 * @brief Transmit null-terminated string to BOOTLOADER_USART
 *****************************************************************************/
 void USART_printString(uint8_t *string)
{
 2d4:	b510      	push	{r4, lr}
 2d6:	1e44      	subs	r4, r0, #1
  while (*string != 0)
 2d8:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 2dc:	b110      	cbz	r0, 2e4 <USART_printString+0x10>
  {
    USART_txByte(*string++);
 2de:	f7ff ffe1 	bl	2a4 <USART_txByte>
 2e2:	e7f9      	b.n	2d8 <USART_printString+0x4>
  }
}
 2e4:	bd10      	pop	{r4, pc}
	...

000002e8 <USART_init>:
void USART_init(uint32_t clkdiv)
{
  /* Configure BOOTLOADER_USART */

  /* Set the clock division */
  BOOTLOADER_USART->CLKDIV = clkdiv;
 2e8:	4b03      	ldr	r3, [pc, #12]	; (2f8 <USART_init+0x10>)

  /* Enable RX and TX pins and set location 0 */
  BOOTLOADER_USART->ROUTE = BOOTLOADER_USART_LOCATION |
 2ea:	2203      	movs	r2, #3
void USART_init(uint32_t clkdiv)
{
  /* Configure BOOTLOADER_USART */

  /* Set the clock division */
  BOOTLOADER_USART->CLKDIV = clkdiv;
 2ec:	6158      	str	r0, [r3, #20]

  /* Enable RX and TX pins and set location 0 */
  BOOTLOADER_USART->ROUTE = BOOTLOADER_USART_LOCATION |
 2ee:	655a      	str	r2, [r3, #84]	; 0x54
                 LEUART_ROUTE_RXPEN | LEUART_ROUTE_TXPEN;

  /* Enable RX/TX */
  BOOTLOADER_USART->CMD = LEUART_CMD_RXEN | LEUART_CMD_TXEN;
 2f0:	2205      	movs	r2, #5
 2f2:	60da      	str	r2, [r3, #12]
 2f4:	4770      	bx	lr
 2f6:	bf00      	nop
 2f8:	4000c000 	.word	0x4000c000

000002fc <FLASH_init>:
*   Initializes the Flash programmer
*******************************************************************************/
void FLASH_init(void)
{
  /* Write MSC unlock code to enable interface */
  MSC->LOCK = MSC_UNLOCK_CODE;
 2fc:	4b07      	ldr	r3, [pc, #28]	; (31c <FLASH_init+0x20>)
 2fe:	f641 3271 	movw	r2, #7025	; 0x1b71
 302:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Enable memory controller */
  MSC->WRITECTRL |= MSC_WRITECTRL_WREN;
 304:	689a      	ldr	r2, [r3, #8]
 306:	f042 0201 	orr.w	r2, r2, #1
 30a:	609a      	str	r2, [r3, #8]
  /* Enable DMA */
  DMA->CONFIG = DMA_CONFIG_EN;
 30c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 310:	2201      	movs	r2, #1
 312:	605a      	str	r2, [r3, #4]
  /* Setup the DMA control block. */
  DMA->CTRLBASE = (uint32_t) &descr;
 314:	4a02      	ldr	r2, [pc, #8]	; (320 <FLASH_init+0x24>)
 316:	609a      	str	r2, [r3, #8]
 318:	4770      	bx	lr
 31a:	bf00      	nop
 31c:	400c0000 	.word	0x400c0000
 320:	20000300 	.word	0x20000300

00000324 <FLASH_writeBlock>:
 *****************************************************************************/
 void FLASH_writeBlock(void *block_start,
                                uint32_t offset_into_block,
                                uint32_t count,
                                uint8_t const *buffer)
{
 324:	b570      	push	{r4, r5, r6, lr}
  /* Check for an active transfer. If a transfer is in progress,
   * we have to delay. Normally, the USART transfer takes more time
   * than writing, but we have to make sure. */
  while (DMA->CHENS & DMA_CHENS_CH0ENS) ;
 326:	4d10      	ldr	r5, [pc, #64]	; (368 <FLASH_writeBlock+0x44>)
 328:	6aac      	ldr	r4, [r5, #40]	; 0x28
 32a:	07e4      	lsls	r4, r4, #31
 32c:	d4fb      	bmi.n	326 <FLASH_writeBlock+0x2>

  /* Set up a basic memory to peripheral DMA transfer. */
  /* Load the start address into the MSC */
  MSC->ADDRB    = ((uint32_t) block_start) + offset_into_block;
 32e:	4c0f      	ldr	r4, [pc, #60]	; (36c <FLASH_writeBlock+0x48>)
  MSC->WRITECMD = MSC_WRITECMD_LADDRIM;

  /* Set the MSC as the destination. */
  descr.DSTEND = (void *)(&(MSC->WDATA));
 330:	4e0f      	ldr	r6, [pc, #60]	; (370 <FLASH_writeBlock+0x4c>)
   * than writing, but we have to make sure. */
  while (DMA->CHENS & DMA_CHENS_CH0ENS) ;

  /* Set up a basic memory to peripheral DMA transfer. */
  /* Load the start address into the MSC */
  MSC->ADDRB    = ((uint32_t) block_start) + offset_into_block;
 332:	4408      	add	r0, r1
  MSC->WRITECMD = MSC_WRITECMD_LADDRIM;

  /* Set the MSC as the destination. */
  descr.DSTEND = (void *)(&(MSC->WDATA));
 334:	490f      	ldr	r1, [pc, #60]	; (374 <FLASH_writeBlock+0x50>)
   * than writing, but we have to make sure. */
  while (DMA->CHENS & DMA_CHENS_CH0ENS) ;

  /* Set up a basic memory to peripheral DMA transfer. */
  /* Load the start address into the MSC */
  MSC->ADDRB    = ((uint32_t) block_start) + offset_into_block;
 336:	6120      	str	r0, [r4, #16]
  MSC->WRITECMD = MSC_WRITECMD_LADDRIM;
 338:	2001      	movs	r0, #1
 33a:	60e0      	str	r0, [r4, #12]

  /* Set the MSC as the destination. */
  descr.DSTEND = (void *)(&(MSC->WDATA));
 33c:	604e      	str	r6, [r1, #4]

  /* Set up the end pointer to copy from the buffer. */
  descr.SRCEND = (void *)(buffer + count - 4);
 33e:	1f16      	subs	r6, r2, #4
               | DMA_CTRL_CYCLE_CTRL_BASIC /* Basic transfer */
                                           /* Number of transfers minus two. */
                                           /* This field contains the number of transfers minus 1. */
                                           /* Because one word is transerred using WRITETRIG we need to */
                                           /* Substract one more. */
               | (((count / 4) - 2) << _DMA_CTRL_N_MINUS_1_SHIFT);
 340:	0892      	lsrs	r2, r2, #2
 342:	3a02      	subs	r2, #2
 344:	0112      	lsls	r2, r2, #4
 346:	f042 426a 	orr.w	r2, r2, #3925868544	; 0xea000000

  /* Set the MSC as the destination. */
  descr.DSTEND = (void *)(&(MSC->WDATA));

  /* Set up the end pointer to copy from the buffer. */
  descr.SRCEND = (void *)(buffer + count - 4);
 34a:	441e      	add	r6, r3
               | DMA_CTRL_CYCLE_CTRL_BASIC /* Basic transfer */
                                           /* Number of transfers minus two. */
                                           /* This field contains the number of transfers minus 1. */
                                           /* Because one word is transerred using WRITETRIG we need to */
                                           /* Substract one more. */
               | (((count / 4) - 2) << _DMA_CTRL_N_MINUS_1_SHIFT);
 34c:	4302      	orrs	r2, r0

  /* Set the MSC as the destination. */
  descr.DSTEND = (void *)(&(MSC->WDATA));

  /* Set up the end pointer to copy from the buffer. */
  descr.SRCEND = (void *)(buffer + count - 4);
 34e:	600e      	str	r6, [r1, #0]

  /* Control information */
  descr.CTRL = DMA_CTRL_DST_INC_NONE       /* Do not increment destination */
 350:	608a      	str	r2, [r1, #8]
                                           /* Because one word is transerred using WRITETRIG we need to */
                                           /* Substract one more. */
               | (((count / 4) - 2) << _DMA_CTRL_N_MINUS_1_SHIFT);

  /* Set channel to trigger on MSC ready for data */
  DMA->CH[0].CTRL = DMA_CH_CTRL_SOURCESEL_MSC
 352:	4a09      	ldr	r2, [pc, #36]	; (378 <FLASH_writeBlock+0x54>)
 354:	f44f 1140 	mov.w	r1, #3145728	; 0x300000
 358:	6011      	str	r1, [r2, #0]
                    | DMA_CH_CTRL_SIGSEL_MSCWDATA;

  /* Load first word into the DMA */
  MSC->WDATA = *((uint32_t *)(buffer));
 35a:	681b      	ldr	r3, [r3, #0]
 35c:	61a3      	str	r3, [r4, #24]

  /* Activate channel 0 */
  DMA->CHENS = DMA_CHENS_CH0ENS;

  /* Trigger the transfer */
  MSC->WRITECMD = MSC_WRITECMD_WRITETRIG;
 35e:	2310      	movs	r3, #16

  /* Load first word into the DMA */
  MSC->WDATA = *((uint32_t *)(buffer));

  /* Activate channel 0 */
  DMA->CHENS = DMA_CHENS_CH0ENS;
 360:	62a8      	str	r0, [r5, #40]	; 0x28

  /* Trigger the transfer */
  MSC->WRITECMD = MSC_WRITECMD_WRITETRIG;
 362:	60e3      	str	r3, [r4, #12]
 364:	bd70      	pop	{r4, r5, r6, pc}
 366:	bf00      	nop
 368:	400c2000 	.word	0x400c2000
 36c:	400c0000 	.word	0x400c0000
 370:	400c0018 	.word	0x400c0018
 374:	20000300 	.word	0x20000300
 378:	400c3100 	.word	0x400c3100

0000037c <FLASH_eraseOneBlock>:
  uint32_t acc = 0xFFFFFFFF;
  uint32_t *ptr;

  /* Optimization - check if block is allready erased.
   * This will typically happen when the chip is new. */
  for (ptr = (uint32_t *) blockStart; ptr < (uint32_t *)(blockStart + FLASH_PAGE_SIZE); ptr++)
 37c:	4602      	mov	r2, r0
 *
 * This function will not return until the block has been erased.
 *****************************************************************************/
void FLASH_eraseOneBlock(uint32_t blockStart)
{
  uint32_t acc = 0xFFFFFFFF;
 37e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  uint32_t *ptr;

  /* Optimization - check if block is allready erased.
   * This will typically happen when the chip is new. */
  for (ptr = (uint32_t *) blockStart; ptr < (uint32_t *)(blockStart + FLASH_PAGE_SIZE); ptr++)
 382:	f500 6100 	add.w	r1, r0, #2048	; 0x800
 386:	428a      	cmp	r2, r1
 388:	d203      	bcs.n	392 <FLASH_eraseOneBlock+0x16>
    acc &= *ptr;
 38a:	f852 1b04 	ldr.w	r1, [r2], #4
 38e:	400b      	ands	r3, r1
 390:	e7f7      	b.n	382 <FLASH_eraseOneBlock+0x6>

  /* If the accumulator is unchanged, there is no need to do an erase. */
  if (acc == 0xFFFFFFFF)
 392:	3301      	adds	r3, #1
 394:	d008      	beq.n	3a8 <FLASH_eraseOneBlock+0x2c>
    return;

  /* Load address */
  MSC->ADDRB    = blockStart;
 396:	4b05      	ldr	r3, [pc, #20]	; (3ac <FLASH_eraseOneBlock+0x30>)
  MSC->WRITECMD = MSC_WRITECMD_LADDRIM;
 398:	2201      	movs	r2, #1
  /* If the accumulator is unchanged, there is no need to do an erase. */
  if (acc == 0xFFFFFFFF)
    return;

  /* Load address */
  MSC->ADDRB    = blockStart;
 39a:	6118      	str	r0, [r3, #16]
  MSC->WRITECMD = MSC_WRITECMD_LADDRIM;
 39c:	60da      	str	r2, [r3, #12]

  /* Send Erase Page command */
  MSC->WRITECMD = MSC_WRITECMD_ERASEPAGE;
 39e:	2202      	movs	r2, #2
 3a0:	60da      	str	r2, [r3, #12]

  /* Waiting for erase to complete */
  while ((MSC->STATUS & MSC_STATUS_BUSY)) ;
 3a2:	69da      	ldr	r2, [r3, #28]
 3a4:	07d2      	lsls	r2, r2, #31
 3a6:	d4fc      	bmi.n	3a2 <FLASH_eraseOneBlock+0x26>
 3a8:	4770      	bx	lr
 3aa:	bf00      	nop
 3ac:	400c0000 	.word	0x400c0000

000003b0 <CRC_calc>:
 *
 * @return
 *   The computed CRC value.
 *****************************************************************************/
 uint16_t CRC_calc(uint8_t *start, uint8_t *end)
{
 3b0:	4603      	mov	r3, r0
  uint16_t crc = 0x0;
 3b2:	2000      	movs	r0, #0
  uint8_t  *data;

  for (data = start; data < end; data++)
 3b4:	428b      	cmp	r3, r1
 3b6:	d20e      	bcs.n	3d6 <CRC_calc+0x26>
  {
    crc  = (crc >> 8) | (crc << 8);
    crc ^= *data;
 3b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 3bc:	ba40      	rev16	r0, r0
 3be:	b280      	uxth	r0, r0
 3c0:	4050      	eors	r0, r2
    crc ^= (crc & 0xff) >> 4;
 3c2:	f3c0 1203 	ubfx	r2, r0, #4, #4
 3c6:	4050      	eors	r0, r2
    crc ^= crc << 12;
 3c8:	ea80 3000 	eor.w	r0, r0, r0, lsl #12
 3cc:	b280      	uxth	r0, r0
    crc ^= (crc & 0xff) << 5;
 3ce:	b2c2      	uxtb	r2, r0
 3d0:	ea80 1042 	eor.w	r0, r0, r2, lsl #5
 3d4:	e7ee      	b.n	3b4 <CRC_calc+0x4>
  }
  return crc;
}
 3d6:	4770      	bx	lr

000003d8 <verify>:
 *   The start of the block to calculate CRC of.
 * @param end
 *   The end of the block. This byte is not included in the checksum.
 *****************************************************************************/
void verify(uint32_t start, uint32_t end)
{
 3d8:	b538      	push	{r3, r4, r5, lr}
 3da:	4604      	mov	r4, r0
 3dc:	460d      	mov	r5, r1
  USART_printString(crcString);
 3de:	4807      	ldr	r0, [pc, #28]	; (3fc <verify+0x24>)
 3e0:	f7ff ff78 	bl	2d4 <USART_printString>
  USART_printHex(CRC_calc((void *) start, (void *) end));
 3e4:	4629      	mov	r1, r5
 3e6:	4620      	mov	r0, r4
 3e8:	f7ff ffe2 	bl	3b0 <CRC_calc>
 3ec:	f7ff ff62 	bl	2b4 <USART_printHex>
  USART_printString(newLineString);
 3f0:	4803      	ldr	r0, [pc, #12]	; (400 <verify+0x28>)
}
 3f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 *****************************************************************************/
void verify(uint32_t start, uint32_t end)
{
  USART_printString(crcString);
  USART_printHex(CRC_calc((void *) start, (void *) end));
  USART_printString(newLineString);
 3f6:	f7ff bf6d 	b.w	2d4 <USART_printString>
 3fa:	bf00      	nop
 3fc:	20000000 	.word	0x20000000
 400:	20000008 	.word	0x20000008

00000404 <commandlineLoop>:
 * @brief
 *   The main command line loop. Placed in Ram so that it can still run after
 *   a destructive write operation.
 *****************************************************************************/
void commandlineLoop(void)
{
 404:	b538      	push	{r3, r4, r5, lr}
  uint32_t flashSize;
  uint8_t  c;

  /* Find the size of the flash. DEVINFO->MSIZE is the
   * size in KB so left shift by 10. */
  flashSize = ((DEVINFO->MSIZE & _DEVINFO_MSIZE_FLASH_MASK) >> _DEVINFO_MSIZE_FLASH_SHIFT)
 406:	4b17      	ldr	r3, [pc, #92]	; (464 <commandlineLoop+0x60>)
 408:	6c9d      	ldr	r5, [r3, #72]	; 0x48
 40a:	b2ad      	uxth	r5, r5
 40c:	02ad      	lsls	r5, r5, #10

  /* The main command loop */
  while (1)
    {
      /* Retrieve new character */
      c = USART_rxByte();
 40e:	f7ff ff39 	bl	284 <USART_rxByte>
      /* Echo */
      if (c != 0)
 412:	4604      	mov	r4, r0
 414:	2800      	cmp	r0, #0
 416:	d0fa      	beq.n	40e <commandlineLoop+0xa>
	{
	  USART_txByte(c);
 418:	f7ff ff44 	bl	2a4 <USART_txByte>
	}
      switch (c)
 41c:	2c72      	cmp	r4, #114	; 0x72
 41e:	d01d      	beq.n	45c <commandlineLoop+0x58>
 420:	d806      	bhi.n	430 <commandlineLoop+0x2c>
 422:	2c62      	cmp	r4, #98	; 0x62
 424:	d013      	beq.n	44e <commandlineLoop+0x4a>
 426:	2c63      	cmp	r4, #99	; 0x63
 428:	d1f1      	bne.n	40e <commandlineLoop+0xa>
	case 'v':
	  verify(0, flashSize);
	  break;
	  /* Verify content by calculating CRC of application area */
	case 'c':
	  verify(BOOTLOADER_SIZE, flashSize);
 42a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 42e:	e011      	b.n	454 <commandlineLoop+0x50>
      /* Echo */
      if (c != 0)
	{
	  USART_txByte(c);
	}
      switch (c)
 430:	2c75      	cmp	r4, #117	; 0x75
 432:	d003      	beq.n	43c <commandlineLoop+0x38>
 434:	2c76      	cmp	r4, #118	; 0x76
 436:	d1ea      	bne.n	40e <commandlineLoop+0xa>
	case 'b':
	  BOOT_boot();
	  break;
	  /* Verify content by calculating CRC of entire flash */
	case 'v':
	  verify(0, flashSize);
 438:	2000      	movs	r0, #0
 43a:	e00b      	b.n	454 <commandlineLoop+0x50>
	}
      switch (c)
	{
	  /* Upload command */
	case 'u':
	  USART_printString(readyString);
 43c:	480a      	ldr	r0, [pc, #40]	; (468 <commandlineLoop+0x64>)
 43e:	f7ff ff49 	bl	2d4 <USART_printString>
	  XMODEM_download(BOOTLOADER_SIZE, flashSize);
 442:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 446:	4629      	mov	r1, r5
 448:	f7ff feb0 	bl	1ac <XMODEM_download>
	  break;
 44c:	e7df      	b.n	40e <commandlineLoop+0xa>
	  /* Boot into new program */
	case 'b':
	  BOOT_boot();
 44e:	f000 f855 	bl	4fc <BOOT_boot>
	  break;
 452:	e7dc      	b.n	40e <commandlineLoop+0xa>
	case 'v':
	  verify(0, flashSize);
	  break;
	  /* Verify content by calculating CRC of application area */
	case 'c':
	  verify(BOOTLOADER_SIZE, flashSize);
 454:	4629      	mov	r1, r5
 456:	f7ff ffbf 	bl	3d8 <verify>
	  break;
 45a:	e7d8      	b.n	40e <commandlineLoop+0xa>
	  /* Reset command */
	case 'r':
	  /* Write to the Application Interrupt/Reset Command Register to reset
	   * the EFM32. See section 9.3.7 in the reference manual. */
	  SCB->AIRCR = 0x05FA0004;
 45c:	4b03      	ldr	r3, [pc, #12]	; (46c <commandlineLoop+0x68>)
 45e:	4a04      	ldr	r2, [pc, #16]	; (470 <commandlineLoop+0x6c>)
 460:	60da      	str	r2, [r3, #12]
	  break;
 462:	e7d4      	b.n	40e <commandlineLoop+0xa>
 464:	0fe081b0 	.word	0x0fe081b0
 468:	2000000b 	.word	0x2000000b
 46c:	e000ed00 	.word	0xe000ed00
 470:	05fa0004 	.word	0x05fa0004

00000474 <main>:

/**************************************************************************//**
 * @brief  Main function
 *****************************************************************************/
int main(void)
{
 474:	b510      	push	{r4, lr}
  uint32_t clkdiv;
  uint32_t tuning;

  /* Enable clocks for peripherals. */
  CMU->HFPERCLKDIV = CMU_HFPERCLKDIV_HFPERCLKEN;
 476:	4b1b      	ldr	r3, [pc, #108]	; (4e4 <main+0x70>)
#endif

#if defined ( _DEVINFO_HFRCOCAL1_BAND28_MASK )
  /* Change to 28MHz internal osciallator to increase speed of
   * bootloader */
  tuning = (DEVINFO->HFRCOCAL1 & _DEVINFO_HFRCOCAL1_BAND28_MASK)
 478:	4c1b      	ldr	r4, [pc, #108]	; (4e8 <main+0x74>)
{
  uint32_t clkdiv;
  uint32_t tuning;

  /* Enable clocks for peripherals. */
  CMU->HFPERCLKDIV = CMU_HFPERCLKDIV_HFPERCLKEN;
 47a:	f44f 7280 	mov.w	r2, #256	; 0x100
 47e:	609a      	str	r2, [r3, #8]
  CMU->HFPERCLKEN0 = CMU_HFPERCLKEN0_GPIO | BOOTLOADER_USART_CLOCKEN;
 480:	f242 0201 	movw	r2, #8193	; 0x2001
 484:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable LE and DMA interface */
  CMU->HFCORECLKEN0 = CMU_HFCORECLKEN0_LE | CMU_HFCORECLKEN0_DMA;
 486:	2211      	movs	r2, #17
 488:	641a      	str	r2, [r3, #64]	; 0x40

  /* Enable LFRCO for RTC */
  CMU->OSCENCMD = CMU_OSCENCMD_LFRCOEN;
 48a:	2240      	movs	r2, #64	; 0x40
 48c:	621a      	str	r2, [r3, #32]
  /* Setup LFA to use LFRCRO */
  CMU->LFCLKSEL = CMU_LFCLKSEL_LFA_LFRCO | CMU_LFCLKSEL_LFB_HFCORECLKLEDIV2;
 48e:	220d      	movs	r2, #13
 490:	629a      	str	r2, [r3, #40]	; 0x28
#endif

#if defined ( _DEVINFO_HFRCOCAL1_BAND28_MASK )
  /* Change to 28MHz internal osciallator to increase speed of
   * bootloader */
  tuning = (DEVINFO->HFRCOCAL1 & _DEVINFO_HFRCOCAL1_BAND28_MASK)
 492:	6b22      	ldr	r2, [r4, #48]	; 0x30
 494:	f3c2 2207 	ubfx	r2, r2, #8, #8
           >> _DEVINFO_HFRCOCAL1_BAND28_SHIFT;

  CMU->HFRCOCTRL = CMU_HFRCOCTRL_BAND_28MHZ | tuning;
 498:	f442 62a0 	orr.w	r2, r2, #1280	; 0x500
 49c:	60da      	str	r2, [r3, #12]
   * 0 : TX - Pin E10, RX - Pin E11
   * Configure GPIO pins LOCATION 1 as push pull (TX)
   * and input (RX)
   * To avoid false start, configure output as high
   */
  GPIO->P[4].DOUT = (1 << 10);
 49e:	f5a3 2342 	sub.w	r3, r3, #794624	; 0xc2000
 4a2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 4a6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  GPIO->P[4].MODEH = GPIO_P_MODEH_MODE10_PUSHPULL | GPIO_P_MODEH_MODE11_INPUT;
 4aa:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 4ae:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
#else
  clkdiv = 0; /// fix me
#endif

  /* Initialize the UART */
  USART_init(clkdiv);
 4b2:	2000      	movs	r0, #0
 4b4:	f7ff ff18 	bl	2e8 <USART_init>

  /* Print a message to show that we are in bootloader mode */
  USART_printString((uint8_t*) "\r\n\r\n");
 4b8:	480c      	ldr	r0, [pc, #48]	; (4ec <main+0x78>)
 4ba:	f7ff ff0b 	bl	2d4 <USART_printString>
  USART_printString((uint8_t*)BOOTLOADER_VERSION_STRING);
 4be:	480c      	ldr	r0, [pc, #48]	; (4f0 <main+0x7c>)
 4c0:	f7ff ff08 	bl	2d4 <USART_printString>
  USART_printString((uint8_t*)" ChipID: ");
 4c4:	480b      	ldr	r0, [pc, #44]	; (4f4 <main+0x80>)
 4c6:	f7ff ff05 	bl	2d4 <USART_printString>
  /* Print the chip ID. This is useful for production tracking */
  USART_printHex(DEVINFO->UNIQUEH);
 4ca:	6c60      	ldr	r0, [r4, #68]	; 0x44
 4cc:	f7ff fef2 	bl	2b4 <USART_printHex>
  USART_printHex(DEVINFO->UNIQUEL);
 4d0:	6c20      	ldr	r0, [r4, #64]	; 0x40
 4d2:	f7ff feef 	bl	2b4 <USART_printHex>
  USART_printString((uint8_t*)"\r\n");
 4d6:	4808      	ldr	r0, [pc, #32]	; (4f8 <main+0x84>)
 4d8:	f7ff fefc 	bl	2d4 <USART_printString>

  /* Initialize flash for writing */
  FLASH_init();
 4dc:	f7ff ff0e 	bl	2fc <FLASH_init>

  /* Start executing command line */
  commandlineLoop();
 4e0:	f7ff ff90 	bl	404 <commandlineLoop>
 4e4:	400c8000 	.word	0x400c8000
 4e8:	0fe081b0 	.word	0x0fe081b0
 4ec:	00000624 	.word	0x00000624
 4f0:	00000629 	.word	0x00000629
 4f4:	0000062e 	.word	0x0000062e
 4f8:	00000626 	.word	0x00000626

000004fc <BOOT_boot>:
  GPIO->IEN         = _GPIO_IEN_RESETVALUE;
  GPIO->IFC         = 0xFFFFFFFF;
#endif

  /* Clear all interrupts set. */
  NVIC->ICER[0]     = 0xFFFFFFFF;
 4fc:	4b12      	ldr	r3, [pc, #72]	; (548 <BOOT_boot+0x4c>)
 4fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 502:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if ( __CORTEX_M != 0 )
  NVIC->ICER[1]     = 0xFFFFFFFF;
 506:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif
  RTC->CTRL         = _RTC_CTRL_RESETVALUE;
 50a:	4a10      	ldr	r2, [pc, #64]	; (54c <BOOT_boot+0x50>)
 50c:	2300      	movs	r3, #0
 50e:	6013      	str	r3, [r2, #0]
  RTC->COMP0        = _RTC_COMP0_RESETVALUE;
 510:	6093      	str	r3, [r2, #8]
  RTC->IEN          = _RTC_IEN_RESETVALUE;
 512:	61d3      	str	r3, [r2, #28]
  /* Reset GPIO settings */
  GPIO->P[5].MODEL  = _GPIO_P_MODEL_RESETVALUE;
 514:	f5a2 22f4 	sub.w	r2, r2, #499712	; 0x7a000
  /* Disable RTC clock */
  CMU->LFACLKEN0    = _CMU_LFACLKEN0_RESETVALUE;
  CMU->LFCLKSEL     = _CMU_LFCLKSEL_RESETVALUE;
 518:	2105      	movs	r1, #5
#endif
  RTC->CTRL         = _RTC_CTRL_RESETVALUE;
  RTC->COMP0        = _RTC_COMP0_RESETVALUE;
  RTC->IEN          = _RTC_IEN_RESETVALUE;
  /* Reset GPIO settings */
  GPIO->P[5].MODEL  = _GPIO_P_MODEL_RESETVALUE;
 51a:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
  /* Disable RTC clock */
  CMU->LFACLKEN0    = _CMU_LFACLKEN0_RESETVALUE;
 51e:	f502 2242 	add.w	r2, r2, #794624	; 0xc2000
 522:	6593      	str	r3, [r2, #88]	; 0x58
  CMU->LFCLKSEL     = _CMU_LFCLKSEL_RESETVALUE;
 524:	6291      	str	r1, [r2, #40]	; 0x28
  /* Disable LFRCO */
  CMU->OSCENCMD     = CMU_OSCENCMD_LFRCODIS;
 526:	2180      	movs	r1, #128	; 0x80
 528:	6211      	str	r1, [r2, #32]
  /* Disable LE interface */
  CMU->HFCORECLKEN0 = _CMU_HFCORECLKEN0_RESETVALUE;
  /* Reset clocks */
  CMU->HFPERCLKDIV  = _CMU_HFPERCLKDIV_RESETVALUE;
 52a:	f44f 7180 	mov.w	r1, #256	; 0x100
  CMU->LFACLKEN0    = _CMU_LFACLKEN0_RESETVALUE;
  CMU->LFCLKSEL     = _CMU_LFCLKSEL_RESETVALUE;
  /* Disable LFRCO */
  CMU->OSCENCMD     = CMU_OSCENCMD_LFRCODIS;
  /* Disable LE interface */
  CMU->HFCORECLKEN0 = _CMU_HFCORECLKEN0_RESETVALUE;
 52e:	6413      	str	r3, [r2, #64]	; 0x40
  /* Reset clocks */
  CMU->HFPERCLKDIV  = _CMU_HFPERCLKDIV_RESETVALUE;
 530:	6091      	str	r1, [r2, #8]
  CMU->HFPERCLKEN0  = _CMU_HFPERCLKEN0_RESETVALUE;
 532:	6453      	str	r3, [r2, #68]	; 0x44

  /* Set new vector table */
  SCB->VTOR = (uint32_t) BOOTLOADER_SIZE;
 534:	4b06      	ldr	r3, [pc, #24]	; (550 <BOOT_boot+0x54>)
 536:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 53a:	609a      	str	r2, [r3, #8]
void BOOT_jump(uint32_t sp, uint32_t pc)
{
  (void) sp;
  (void) pc;
  /* Set new MSP, PSP based on SP (r0)*/
  __asm("msr msp, r0");
 53c:	f380 8808 	msr	MSP, r0
  __asm("msr psp, r0");
 540:	f380 8809 	msr	PSP, r0

  /* Jump to PC (r1)*/
  __asm("mov pc, r1");
 544:	468f      	mov	pc, r1
 546:	4770      	bx	lr
 548:	e000e100 	.word	0xe000e100
 54c:	40080000 	.word	0x40080000
 550:	e000ed00 	.word	0xe000ed00

00000554 <Default_Handler>:

/*----------------------------------------------------------------------------
  Default Handler for Exceptions / Interrupts
 *----------------------------------------------------------------------------*/
void Default_Handler(void)
{
 554:	e7fe      	b.n	554 <Default_Handler>
	...

00000558 <Reset_Handler>:


/*----------------------------------------------------------------------------
  Reset Handler called on controller reset
 *----------------------------------------------------------------------------*/
void Reset_Handler(void) {
 558:	b508      	push	{r3, lr}
  uint32_t *pSrc, *pDest;
  uint32_t *pTable __attribute__((unused));

#ifndef __NO_SYSTEM_INIT
  SystemInit();
 55a:	f7ff fe25 	bl	1a8 <SystemInit>
 *  All addresses must be aligned to 4 bytes boundary.
 */
  pSrc  = &__etext;
  pDest = &__data_start__;

  for ( ; pDest < &__data_end__ ; )
 55e:	2300      	movs	r3, #0
 560:	4a05      	ldr	r2, [pc, #20]	; (578 <Reset_Handler+0x20>)
 562:	4906      	ldr	r1, [pc, #24]	; (57c <Reset_Handler+0x24>)
 564:	1898      	adds	r0, r3, r2
 566:	4288      	cmp	r0, r1
 568:	d204      	bcs.n	574 <Reset_Handler+0x1c>
  {
    *pDest++ = *pSrc++;
 56a:	4905      	ldr	r1, [pc, #20]	; (580 <Reset_Handler+0x28>)
 56c:	5859      	ldr	r1, [r3, r1]
 56e:	5099      	str	r1, [r3, r2]
 570:	3304      	adds	r3, #4
 572:	e7f5      	b.n	560 <Reset_Handler+0x8>
#endif /* __STARTUP_CLEAR_BSS_MULTIPLE || __STARTUP_CLEAR_BSS */

#ifndef __START
#define __START _start
#endif
  __START();
 574:	f7ff fdde 	bl	134 <_mainCRTStartup>
 578:	20000000 	.word	0x20000000
 57c:	20000084 	.word	0x20000084
 580:	0000064c 	.word	0x0000064c

00000584 <exit>:
 584:	b508      	push	{r3, lr}
 586:	4b07      	ldr	r3, [pc, #28]	; (5a4 <exit+0x20>)
 588:	4604      	mov	r4, r0
 58a:	b113      	cbz	r3, 592 <exit+0xe>
 58c:	2100      	movs	r1, #0
 58e:	f3af 8000 	nop.w
 592:	4b05      	ldr	r3, [pc, #20]	; (5a8 <exit+0x24>)
 594:	6818      	ldr	r0, [r3, #0]
 596:	6a83      	ldr	r3, [r0, #40]	; 0x28
 598:	b103      	cbz	r3, 59c <exit+0x18>
 59a:	4798      	blx	r3
 59c:	4620      	mov	r0, r4
 59e:	f000 f833 	bl	608 <_exit>
 5a2:	bf00      	nop
 5a4:	00000000 	.word	0x00000000
 5a8:	0000063c 	.word	0x0000063c

000005ac <__libc_init_array>:
 5ac:	b570      	push	{r4, r5, r6, lr}
 5ae:	4b0e      	ldr	r3, [pc, #56]	; (5e8 <__libc_init_array+0x3c>)
 5b0:	4d0e      	ldr	r5, [pc, #56]	; (5ec <__libc_init_array+0x40>)
 5b2:	1aed      	subs	r5, r5, r3
 5b4:	10ad      	asrs	r5, r5, #2
 5b6:	2400      	movs	r4, #0
 5b8:	461e      	mov	r6, r3
 5ba:	42ac      	cmp	r4, r5
 5bc:	d004      	beq.n	5c8 <__libc_init_array+0x1c>
 5be:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 5c2:	4790      	blx	r2
 5c4:	3401      	adds	r4, #1
 5c6:	e7f8      	b.n	5ba <__libc_init_array+0xe>
 5c8:	f000 f820 	bl	60c <_init>
 5cc:	4d08      	ldr	r5, [pc, #32]	; (5f0 <__libc_init_array+0x44>)
 5ce:	4b09      	ldr	r3, [pc, #36]	; (5f4 <__libc_init_array+0x48>)
 5d0:	1aed      	subs	r5, r5, r3
 5d2:	10ad      	asrs	r5, r5, #2
 5d4:	2400      	movs	r4, #0
 5d6:	461e      	mov	r6, r3
 5d8:	42ac      	cmp	r4, r5
 5da:	d004      	beq.n	5e6 <__libc_init_array+0x3a>
 5dc:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 5e0:	4790      	blx	r2
 5e2:	3401      	adds	r4, #1
 5e4:	e7f8      	b.n	5d8 <__libc_init_array+0x2c>
 5e6:	bd70      	pop	{r4, r5, r6, pc}
 5e8:	20000078 	.word	0x20000078
 5ec:	20000078 	.word	0x20000078
 5f0:	2000007c 	.word	0x2000007c
 5f4:	20000078 	.word	0x20000078

000005f8 <memset>:
 5f8:	4402      	add	r2, r0
 5fa:	4603      	mov	r3, r0
 5fc:	4293      	cmp	r3, r2
 5fe:	d002      	beq.n	606 <memset+0xe>
 600:	f803 1b01 	strb.w	r1, [r3], #1
 604:	e7fa      	b.n	5fc <memset+0x4>
 606:	4770      	bx	lr

00000608 <_exit>:
 608:	e7fe      	b.n	608 <_exit>
 60a:	bf00      	nop

0000060c <_init>:
 60c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 60e:	bf00      	nop
 610:	bcf8      	pop	{r3, r4, r5, r6, r7}
 612:	bc08      	pop	{r3}
 614:	469e      	mov	lr, r3
 616:	4770      	bx	lr

00000618 <_fini>:
 618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 61a:	bf00      	nop
 61c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 61e:	bc08      	pop	{r3}
 620:	469e      	mov	lr, r3
 622:	4770      	bx	lr
 624:	0a0d0a0d 	.word	0x0a0d0a0d
 628:	2e585600 	.word	0x2e585600
 62c:	43200058 	.word	0x43200058
 630:	49706968 	.word	0x49706968
 634:	00203a44 	.word	0x00203a44
 638:	00000043 	.word	0x00000043

0000063c <_global_impure_ptr>:
 63c:	20000018                                ... 

00000640 <__EH_FRAME_BEGIN__>:
 640:	00000000                                ....
